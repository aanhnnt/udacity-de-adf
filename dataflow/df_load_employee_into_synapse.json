{
	"name": "df_load_employee_into_synapse",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_storageaccount_EmpMaster",
						"type": "DatasetReference"
					},
					"name": "sourceemployee"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_synapse_NYC_Payroll_EMP_MD",
						"type": "DatasetReference"
					},
					"name": "sinkemployee"
				}
			],
			"transformations": [
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "MapDrifted2",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "RemoveColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "RemoveColumns2",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "RemoveColumns3",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "RemoveColumns4",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "RemoveColumns5",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "RemoveColumns6",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "RemoveColumns7",
					"description": "Autogenerated by data preview actions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceemployee",
				" derive() ~> MapDrifted1",
				" derive() ~> MapDrifted2",
				" select(mapColumn(",
				"          Column_1,",
				"          Column_2,",
				"          Column_3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
				" select(mapColumn(",
				"          Column_1,",
				"          Column_2,",
				"          Column_3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns2",
				" select(mapColumn(",
				"          Column_1,",
				"          Column_2,",
				"          Column_3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns3",
				" select(mapColumn(",
				"          Column_1,",
				"          Column_2,",
				"          Column_3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns4",
				" select(mapColumn(",
				"          Column_1,",
				"          Column_2,",
				"          Column_3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns5",
				" select(mapColumn(",
				"          Column_1,",
				"          Column_2,",
				"          Column_3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns6",
				" select(mapColumn(",
				"          Column_1,",
				"          Column_2,",
				"          Column_3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns7",
				"sourceemployee sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkemployee"
			]
		}
	}
}